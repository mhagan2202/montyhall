% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/monty-hall-problem.R
\name{play_game}
\alias{play_game}
\title{Let's play a game}
\usage{
play_game()
}
\arguments{
\item{Arguments}{within the function are as follows, new.game is being assigned to
create_game function, first pick. being assigned to the select_door and open.
door being the opened_goat_door on the condition that is is from new.game
and from the first.pick. Then there is the final pick stay and switch with
the only minor differences being the condition as to whether the user
decides to stay and of course calling the opened.door, first pick arguments
Since there are now two deriving point within the program we must follow
through on the pathways of both stay and switch in order to determine the
winner. hence both outcome stay and switch have the same arguments being
only minor difference being the the determine winner function would either
possess the final.pick.stay or final.pick switch argument and of course,
the last argument is new.game which is due to the determine_winner function
that is being called. In order for the determine winner to be selected
as the final outcome from the game is solution must be derived from the
initial question or creation of the particular problem that has been set in
place. Hence when determine_winner function is called first the
initial argument must be identified from either switch or stay to then
returning to the argument to which the determinate solution derives from
which in this case it, new.game. next we have the strategy variable which
is a simple vector between the switch and stay, outcome being derived from
the decision of their switching or staying and the results to that said
decision or outcome. and finally, the game results which combines the element
of both the strategy and outcome values in a nice data.frame.}
}
\value{
game.results which is the end results of both the strategy and outcome
values that has been mentioned in prior statement, in detail
}
\description{
This function is specifically, calling to play the Monty python gameplay
that has been called and taking elements from the previous code.
}
\details{
This piece of code is a collection of the prior codes that have been scripted
to assembly a coherent and playable game within the software. All compiled
into a single function to which initiates the game.
}
\examples{
play_game()
}
